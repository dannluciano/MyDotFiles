#include "ant.hpp"

using namespace std;

Ant::Ant() {
}

Ant::Ant(const Customer& customer) {
		int size_of_customers = Instance::GetInstance().GetNumberCustomers() -1;
		this->customers = vector<Customer>(size_of_customers);
		this->vehicles = vector<TypeVehicle>(size_of_customers);
		this->routes = vector<bool>(size_of_customers);
		this->customers[0] = customer;
		vector<Customer> aux_customers = Instance::GetInstance().GetCustomers();
		aux_customers.erase(aux_customers.begin() + 0);
		aux_customers.erase(aux_customers.begin() + customer.GetLabel());
		size_t i;
		for (i = 0; aux_customers.size() != 0; ++i) {
				int aux_index = rand() % aux_customers.size();
				this->customers[i+1] = aux_customers[aux_index];
				aux_customers.erase(aux_customers.begin() + aux_index);
		}
		for (i = 0; i < size_of_customers;)
		{
				int vehicle_index = rand() % Instance::GetInstance().GetTypesVehicles().size();
				TypeVehicle vehicle = Instance::GetInstance().GetTypesVehicles()[vehicle_index];
				double sum_demand = 0;
				while (sum_demand + this->customers[i].GetDemand() < vehicle.GetVolume())
				{
						this->vehicles[i] = vehicle;
						sum_demand += this->customers[i].GetDemand();
						i++;
				}
				this->routes[i] = true;
		}
}

Ant::Ant(const Ant & ant) {
		this->customers = ant.customers;
		this->vehicles = ant.vehicles;
}

Ant::~Ant() {
}

std::vector<Customer>& Ant::GetCustomers() {
		return this->customers;
}

std::vector<TypeVehicle>& Ant::GetTypeOfVehicles() {
		return this->vehicles;
}

std::vector<bool>& Ant::GetRoutes() {
		return this->routes;
}

std::ostream& operator<<(std::ostream& os, Ant& ant) {
		// os << "--------------------------------------------------" << endl;
		for (size_t i = 0; i < ant.GetCustomers().size(); ++i) {
				os << "|"<< setw(3) << ant.GetCustomers()[i].GetLabel();
		}
		os << "|" << endl;
		for (size_t i = 0; i < ant.GetTypeOfVehicles().size(); ++i) {
				os << "|" << setw(3) << ant.GetTypeOfVehicles()[i].GetType();
		}
		os << "|" << endl;
		for (size_t i = 0; i < ant.GetRoutes().size(); ++i) {
				os << "|" << setw(3) << ant.GetTypeOfVehicles()[i].GetType();
		}
		os << "|" << endl;
		for (size_t i = 0; i < ant.GetCustomers().size(); ++i)
		{
				os << "+---";
		}
		os << "+" <<endl;
		return os;
}

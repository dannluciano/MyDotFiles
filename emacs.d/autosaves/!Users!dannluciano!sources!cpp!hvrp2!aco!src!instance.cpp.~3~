#include "instance.hpp"

using namespace std;

Instance::Instance() {
}

Instance::Instance(int num_customers, const vector<Customer>& customers, int num_types_vehicles, const vector <TypeVehicle>& types_vehicles, double sum_demand) : number_of_customers(num_customers), customers(customers), number_of_types_of_vehicles(num_types_vehicles), types_of_vehicles(types_vehicles), sum_demand(sum_demand) {
}

unsigned int Instance::GetNumberCustomers() const {
		return this->number_of_customers;
}

unsigned int Instance::GetNumberTypesVehicles() const {
		return this->number_of_types_of_vehicles;
}

double Instance::GetSumDemand() const {
		return this->sum_demand;
}

Instance::~Instance() {
}

Instance& Instance::ReadConfigFile(const char* file_name) {
		cout << "Initialize Instance Object" << endl;
		vector<Customer> customers;
		vector<TypeVehicle> vehicles;
		ifstream config_file(file_name);
    if (config_file.good()) {
        string line;
        size_t i;
        getline(config_file, line, '\n');
        size_t number_of_customers = (atoi(line.c_str()) + 1);
				cout << "Number of Customers: " << number_of_customers << endl;
				customers = vector<Customer>(number_of_customers);
        for (i = 0; i < number_of_customers; ++i) {
            readline(config_file, line, "//");
            int label;
            int x;
            int y;
            int demand;
            sscanf(line.c_str(), "%d %d %d %d", &label, &x, &y, &demand);
            Customer customer = Customer(label, x, y, demand);
            customers[customer.GetLabel()] = customer;
        }
				
        double sum_demand = 0.0;
        for (i = 0; i < number_of_customers; ++i) {
            sum_demand += customers[i].GetDemand();
        }
				cout << "Sum of Demand: " << sum_demand << endl;

        readline(config_file, line, "//");
        size_t number_of_types_of_vehicles = atoi(line.c_str());
				cout << "Number of Types of Vehicles: " << number_of_types_of_vehicles << endl;
				vehicles = vector<TypeVehicle>(number_of_types_of_vehicles);
        for (i = 0; i < number_of_types_of_vehicles; ++i) {
            readline(config_file, line, "//");
            int type;
            int volume;
            int cost;
            sscanf(line.c_str(), "%d %d %d", &type, &volume, &cost);
            TypeVehicle vehicle = TypeVehicle(type, volume, cost);
            vehicles[i] = vehicle;
        }
				config_file.close();
				return *(new Instance(number_of_customers, customers, number_of_types_of_vehicles, vehicles, sum_demand));
    }
		abort();
}

ostream& operator<<(ostream& os, Instance& instance) {
    os << "+--Instance---------------------------------------------------------------+" << endl;
    os << "|\tTotal Demand: " << instance.GetSumDemand() << endl;
    os << "|\tNumber of Customers: " << instance.GetNumberCustomers() << endl;
    os << "|\tCustomers: " << endl;
    size_t i;
    for (i = 0; i < instance.customers.size(); ++i) {
        os << "|\t\t" << instance.customers[i] << endl;
    }
    os << "|" << endl;
    os << "|\tNumber of Types of Vehicles: " << instance.number_of_types_of_vehicles << endl;
    os << "|\tType of Vehicles: " << endl;
    for (i = 0; i < instance.types_of_vehicles.size(); ++i) {
        os << "|\t\t" << instance.types_of_vehicles[i] << endl;
    }
    os << "+-------------------------------------------------------------------------------+" << endl;
    return os;
}

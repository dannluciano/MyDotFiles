#include "instance.hpp"

using namespace std;

Instance::Instance() {
}

Instance::Instance(int num_customers, const vector<Customer>& customers, int num_types_vehicles, const vector <TypeVehicle>& types_vehicles, double sum_demand) : number_of_customers(num_customers), customers(customers), number_of_types_of_vehicles(num_types_vehicles), types_of_vehicles(types_vehicles), sum_demand(sum_demand) {
}

int Instance::GetNumberCustomers() const {
		return this->number_of_customers;
}

int Instance::GetNumberTypesVehicles() const {
		return this->number_of_types_of_vehicles;
}

double Instance::GetSumDemand() const {
		return this->sum_demand;
}

Instance::~Instance() {
}

Instance& Instance::ReadConfigFile(const char* file_name) {
		Instance problem;
		vector<Customer> customers;
		vector<TypeVehicle> vehicles;
		ifstream config_file(file_name);
    if (config_file.good()) {
        string line;
        size_t i;
        getline(config_file, line, '\n');
        int number_of_customers = atoi(line.c_str());
				customers = vector<Customer>(number_of_customers);
        for (i = 0; i <= number_of_customers; ++i) {
            readline(config_file, line, "//");
            int label;
            int x;
            int y;
            int demand;
            sscanf(line.c_str(), "%d %d %d %d", &label, &x, &y, &demand);
            Customer customer = Customer(label, x, y, demand);
            customers[customer.GetLabel()] = customer;
            char str[255];
            sprintf(str, "%d\t%d\t%d\t%d", label, x, y, demand);
        }

        double sum_demand = 0.0;
        for (i = 0; i < customers.size(); ++i) {
            sum_demand += customers[i].GetDemand();
        }

        readline(config_file, line, "//");
        int number_of_types_of_vehicles = atoi(line.c_str());
        for (i = 0; i < number_of_types_of_vehicles; ++i) {
            readline(config_file, line, "//");
            int type;
            int volume;
            int cost;
            sscanf(line.c_str(), "%d %d %d", &type, &volume, &cost);
            TypeVehicle vehicle = TypeVehicle(type, volume, cost);
            vehicles[vehicle.GetType()] = vehicle;
        }
    }
    config_file.close();
		problem(number_of_customers, customers, number_of_types_of_vehicles, vehicles, sum_demand);
		return problem;
}
